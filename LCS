class Solution {
    int dp[][]=null;
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        dp=new int[n+1][m+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<m+1;j++){
                if(i*j==0)dp[i][j]=0;
            }
        }
        return solve(text1,text2,text1.length(),text2.length());
    }

    int solve(String s1,String s2,int n,int m){
       for(int i=1;i<n+1;i++){
           for(int j=1;j<m+1;j++){
               if(s1.charAt(i-1)==s2.charAt(j-1)){
                   dp[i][j]=dp[i-1][j-1]+1;
               }
               else dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
           }
       }
       return dp[n][m];
        
        
    }
   

    // int solve(String s1,String s2,int n,int m){
    //     if(n==0 || m==0)return 0;
    //     if(dp[n][m]!=-1)return dp[n][m];
    //     if(s1.charAt(n-1)==s2.charAt(m-1))
    //         return dp[n][m]=solve(s1,s2,n-1,m-1)+1;
    //     else 
    //         return dp[n][m]=Math.max(solve(s1,s2,n-1,m),solve(s1,s2,n,m-1));
        
        
    // }
}
